generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum AssetType {
  SAAS
  ECOMMERCE
  APP
  OTHER
}

enum AssetStatus {
  DRAFT
  PENDING_VERIFICATION
  ACTIVE
  SOLD
  WITHDRAWN
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  ESCROW_DEPOSITED
  RELEASED
  REFUNDED
  FAILED
}

model User {
  id              String    @id @default(cuid())
  email           String?   @unique
  emailVerified   DateTime?
  phone           String?
  name            String?
  password        String?
  image           String?
  role            UserRole  @default(BUYER)
  profileImage    String?
  company         String?
  bio             String?
  isVerified      Boolean   @default(false)
  verifiedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  assets          Asset[]
  bids            Bid[]
  sentMessages    Message[] @relation("sender")
  receivedMessages Message[] @relation("receiver")
  payments        Payment[]
  reviews         Verification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Asset {
  id              String      @id @default(cuid())
  sellerId        String
  seller          User        @relation(fields: [sellerId], references: [id])
  
  type            AssetType
  category        String
  title           String
  summary         String      @db.Text
  description     String      @db.Text
  status          AssetStatus @default(DRAFT)
  
  askingPrice     Decimal     @db.Decimal(12, 2)
  region          String?
  industry        String?
  
  viewCount       Int         @default(0)
  trustScore      Int         @default(0)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  financials      Financials?
  bids            Bid[]
  messages        Message[]
  documents       Document[]
  verification    Verification?
}

model Financials {
  id              String    @id @default(cuid())
  assetId         String    @unique
  asset           Asset     @relation(fields: [assetId], references: [id])
  
  monthlyRevenue  Decimal   @db.Decimal(12, 2)
  monthlyProfit   Decimal   @db.Decimal(12, 2)
  yearlyRevenue   Decimal   @db.Decimal(12, 2)
  yearlyProfit    Decimal   @db.Decimal(12, 2)
  growthRate      Decimal   @db.Decimal(5, 2)
  
  enterpriseValue Decimal?  @db.Decimal(12, 2)
  valuation       Decimal?  @db.Decimal(12, 2)
  
  revenueHistory  Json?
  profitHistory   Json?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Bid {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  assetId         String
  asset           Asset     @relation(fields: [assetId], references: [id])
  
  bidAmount       Decimal   @db.Decimal(12, 2)
  message         String?   @db.Text
  isAccepted      Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([assetId])
  @@index([userId])
}

model Message {
  id              String    @id @default(cuid())
  senderId        String
  sender          User      @relation("sender", fields: [senderId], references: [id])
  receiverId      String
  receiver        User      @relation("receiver", fields: [receiverId], references: [id])
  assetId         String?
  asset           Asset?    @relation(fields: [assetId], references: [id])
  
  content         String    @db.Text
  isRead          Boolean   @default(false)
  ndaSigned       Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  
  @@index([senderId])
  @@index([receiverId])
  @@index([assetId])
}

model Document {
  id              String    @id @default(cuid())
  assetId         String
  asset           Asset     @relation(fields: [assetId], references: [id])
  
  fileName        String
  fileUrl         String
  fileType        String
  fileSize        Int
  
  documentType    String
  requiresNDA     Boolean   @default(false)
  
  uploadedAt      DateTime  @default(now())
  
  @@index([assetId])
}

model Verification {
  id              String             @id @default(cuid())
  assetId         String             @unique
  asset           Asset              @relation(fields: [assetId], references: [id])
  reviewerId      String?
  reviewer        User?              @relation(fields: [reviewerId], references: [id])
  
  status          VerificationStatus @default(PENDING)
  accountantNotes String?            @db.Text
  lawyerNotes     String?            @db.Text
  internalNotes   String?            @db.Text
  
  submittedAt     DateTime           @default(now())
  reviewedAt      DateTime?
  
  @@index([status])
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  
  amount          Decimal       @db.Decimal(12, 2)
  status          PaymentStatus @default(PENDING)
  
  paymentMethod   String?
  transactionId   String?
  escrowConfirmed Boolean       @default(false)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([userId])
  @@index([status])
}